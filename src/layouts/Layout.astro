<!doctype html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png" />
		<link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png" />
		<link rel="apple-touch-icon" href="/favicon-32x32.png" />
		<meta name="generator" content={Astro.generator} />
		<title>{Astro.props.title} | Novana</title>
		<meta name="description" content={Astro.props.description || "Deep tech insights and market analysis"} />
		<link rel="preconnect" href="https://fonts.googleapis.com">
		<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
		<link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&family=Cardo:wght@400;700&display=swap" rel="stylesheet">
	</head>
	<body>
		<!-- Page enter overlay for smooth transitions -->
		<div class="page-enter-overlay" style="
			position: fixed;
			top: 0;
			left: 0;
			width: 100%;
			height: 100%;
			background: var(--bg-white);
			z-index: 9999;
			opacity: 1;
			transition: opacity 0.6s ease;
			pointer-events: none;
		"></div>
		
		<slot />
		
		<script>
			// Favicon theme handler with persistent state
			function updateFavicon() {
				const isDark = document.documentElement.getAttribute('data-theme') === 'dark';
				const favicon16 = document.querySelector('link[rel="icon"][sizes="16x16"]');
				const favicon32 = document.querySelector('link[rel="icon"][sizes="32x32"]');
				const appleTouchIcon = document.querySelector('link[rel="apple-touch-icon"]');
				
				// Store current state to prevent unnecessary switches
				const currentState = sessionStorage.getItem('favicon-theme');
				const newState = isDark ? 'dark' : 'light';
				
				// Only update if state has actually changed
				if (currentState !== newState) {
					sessionStorage.setItem('favicon-theme', newState);
					
					if (isDark) {
						// Use inverted versions for dark mode
						if (favicon16) favicon16.href = '/favicon-16x16-dark.png';
						if (favicon32) favicon32.href = '/favicon-32x32-dark.png';
						if (appleTouchIcon) appleTouchIcon.href = '/favicon-32x32-dark.png';
					} else {
						// Use original versions for light mode
						if (favicon16) favicon16.href = '/favicon-16x16.png';
						if (favicon32) favicon32.href = '/favicon-32x32.png';
						if (appleTouchIcon) appleTouchIcon.href = '/favicon-32x32.png';
					}
				}
			}
			
			// Initialize favicon immediately based on stored theme or current theme
			function initFavicon() {
				// Check for stored theme first, then current theme
				const storedTheme = sessionStorage.getItem('favicon-theme');
				const currentTheme = document.documentElement.getAttribute('data-theme');
				const isDark = storedTheme === 'dark' || (storedTheme === null && currentTheme === 'dark');
				
				const favicon16 = document.querySelector('link[rel="icon"][sizes="16x16"]');
				const favicon32 = document.querySelector('link[rel="icon"][sizes="32x32"]');
				const appleTouchIcon = document.querySelector('link[rel="apple-touch-icon"]');
				
				if (isDark) {
					if (favicon16) favicon16.href = '/favicon-16x16-dark.png';
					if (favicon32) favicon32.href = '/favicon-32x32-dark.png';
					if (appleTouchIcon) appleTouchIcon.href = '/favicon-32x32-dark.png';
				} else {
					if (favicon16) favicon16.href = '/favicon-16x16.png';
					if (favicon32) favicon32.href = '/favicon-32x32.png';
					if (appleTouchIcon) appleTouchIcon.href = '/favicon-32x32.png';
				}
				
				sessionStorage.setItem('favicon-theme', isDark ? 'dark' : 'light');
			}
			
			// Initialize favicon before DOM is ready to prevent flicker
			initFavicon();
			
			// Page transition handler
			document.addEventListener('DOMContentLoaded', function() {
				// Update favicon on page load (but only if theme actually changed)
				updateFavicon();
				
				// Watch for theme changes
				const observer = new MutationObserver((mutations) => {
					mutations.forEach((mutation) => {
						if (mutation.type === 'attributes' && mutation.attributeName === 'data-theme') {
							updateFavicon();
						}
					});
				});
				observer.observe(document.documentElement, { attributes: true, attributeFilter: ['data-theme'] });
				
				// Handle page enter animation - fade out the overlay
				const enterOverlay = document.querySelector('.page-enter-overlay');
				if (enterOverlay) {
					// Small delay to ensure page is rendered
					setTimeout(() => {
						enterOverlay.style.opacity = '0';
						// Remove overlay after fade completes
						setTimeout(() => {
							enterOverlay.remove();
						}, 600);
					}, 50);
				}
				
				// Function to create smooth page transitions
				function createTransition(targetUrl) {
					// Create a transition overlay
					const overlay = document.createElement('div');
					overlay.style.cssText = `
						position: fixed;
						top: 0;
						left: 0;
						width: 100%;
						height: 100%;
						background: var(--bg-white);
						z-index: 9999;
						opacity: 0;
						transition: opacity 0.3s ease;
						pointer-events: none;
					`;
					document.body.appendChild(overlay);
					
					// Start fade out
					requestAnimationFrame(() => {
						overlay.style.opacity = '1';
					});
					
					// Navigate after fade completes
					setTimeout(() => {
						window.location.href = targetUrl;
					}, 300);
				}
				
				// Get all internal navigation links
				const links = document.querySelectorAll('a[href^="/"], a[href^="./"], a[href^="../"]');
				
				links.forEach(link => {
					// Skip if link has download attribute, target="_blank", or is external
					if (link.hasAttribute('download') || 
						link.getAttribute('target') === '_blank' || 
						link.hostname !== window.location.hostname) {
						return;
					}
					
					link.addEventListener('click', function(e) {
						const href = this.getAttribute('href');
						
						// Skip if it's the same page
						if (href === window.location.pathname) {
							return;
						}
						
						e.preventDefault();
						createTransition(href);
					});
				});
			});
		</script>
	</body>
</html>

<style is:global>
	@import '../styles/global.css';
</style>