---
// This component will be populated by client-side JavaScript
---

<aside class="table-of-contents" id="toc-container">
	<nav class="toc-nav" id="toc-nav">
		<!-- TOC items will be dynamically generated -->
	</nav>
</aside>

<script>
	document.addEventListener('DOMContentLoaded', function() {
		const tocNav = document.getElementById('toc-nav');
		const tocContainer = document.getElementById('toc-container');
		// Generate TOC items - exclude headings in sidebars
		const headings = document.querySelectorAll('.article-content h2, .article-content h3');
		const tocItems = [];

		// Generate TOC items
		headings.forEach((heading, index) => {
			const id = heading.id || `heading-${index}`;
			heading.id = id; // Ensure heading has an ID
			
			const tocItem = document.createElement('a');
			tocItem.href = `#${id}`;
			tocItem.textContent = heading.textContent;
			tocItem.className = heading.tagName === 'H2' ? 'toc-item toc-h2' : 'toc-item toc-h3';
			tocItem.dataset.target = id;
			
			tocNav.appendChild(tocItem);
			tocItems.push({
				element: tocItem,
				target: heading
			});
		});

		// Set initial position aligned with Overview or Abstract
		const overviewElement = document.getElementById('overview') || document.getElementById('abstract') || document.querySelector('.article-content h2');
		if (overviewElement) {
			const overviewRect = overviewElement.getBoundingClientRect();
			const overviewTop = overviewRect.top + window.scrollY;
			
			// Set initial absolute position
			tocContainer.style.position = 'absolute';
			tocContainer.style.top = overviewTop + 'px';
			
			// Handle scroll to fix position
			let isFixed = false;
			const fixedTop = 120; // Fixed position higher up on screen
			
			window.addEventListener('scroll', () => {
				const scrollY = window.scrollY;
				const shouldBeFixed = scrollY >= overviewTop - fixedTop;
				
				if (shouldBeFixed && !isFixed) {
					tocContainer.style.position = 'fixed';
					tocContainer.style.top = fixedTop + 'px';
					isFixed = true;
				} else if (!shouldBeFixed && isFixed) {
					tocContainer.style.position = 'absolute';
					tocContainer.style.top = overviewTop + 'px';
					isFixed = false;
				}
			});
		}

		// Function to update active section based on scroll position
		function updateActiveSection() {
			const scrollPosition = window.scrollY + 150;
			let activeHeading = null;

			// Find the heading that's currently visible
			headings.forEach((heading) => {
				const rect = heading.getBoundingClientRect();
				const top = rect.top + window.scrollY;
				
				if (scrollPosition >= top) {
					activeHeading = heading;
				}
			});

			// Update active class and dynamic styling
			document.querySelectorAll('.toc-item').forEach(item => {
				item.classList.remove('active');
				// Reset to default styling - let CSS handle it
				item.style.color = '';
				item.style.fontWeight = '';
			});

			if (activeHeading) {
				const tocItem = document.querySelector(`[data-target="${activeHeading.id}"]`);
				if (tocItem) {
					tocItem.classList.add('active');
					// Get current theme colors from CSS custom properties
					const computedStyle = getComputedStyle(document.documentElement);
					const primaryColor = computedStyle.getPropertyValue('--text-primary').trim();
					
					tocItem.style.color = primaryColor;
					tocItem.style.fontWeight = 'bold';
				}
			}
		}

		// Listen for scroll events
		window.addEventListener('scroll', updateActiveSection);
		
		// Set initial active section
		setTimeout(() => {
			updateActiveSection();
		}, 1000);

		// Smooth scroll for TOC links
		tocItems.forEach(item => {
			item.element.addEventListener('click', (e) => {
				e.preventDefault();
				const target = item.target;
				target.scrollIntoView({
					behavior: 'smooth',
					block: 'start'
				});
			});
		});
	});
</script>

<style>
	.table-of-contents {
		position: fixed;
		left: calc(50% - 275px - 225px);
		width: 180px;
		z-index: 100;
		max-height: 70vh;
		overflow-y: auto;
		font-family: 'Inter', system-ui, sans-serif !important;
		font-size: 14px !important;
	}

	.table-of-contents,
	.table-of-contents *,
	.toc-nav,
	.toc-nav *,
	.toc-item,
	.toc-h2,
	.toc-h3 {
		font-family: 'Inter', system-ui, sans-serif !important;
		font-size: 14px !important;
	}

	.toc-nav {
		display: flex;
		flex-direction: column;
		gap: 14px !important;
		font-family: 'Inter', system-ui, sans-serif !important;
		font-size: 14px !important;
	}

	.toc-item {
		display: block;
		padding: 0;
		margin: 0;
		color: var(--text-muted);
		text-decoration: none;
		font-size: 14px !important;
		line-height: 1.4;
		transition: all 0.3s ease;
		cursor: pointer;
		position: relative;
		font-family: 'Inter', system-ui, sans-serif !important;
		font-weight: normal;
	}

	.toc-h2 {
		font-weight: 500;
		margin: 0;
		color: var(--text-muted);
		font-size: 14px !important;
		font-family: 'Inter', system-ui, sans-serif !important;
	}

	.toc-h3 {
		padding-left: 16px;
		font-size: 14px !important;
		color: var(--text-muted);
		margin: 0;
		font-family: 'Inter', system-ui, sans-serif !important;
	}

	.toc-item:hover {
		color: var(--text-secondary);
	}

	.toc-item.active {
		color: var(--text-primary) !important;
		font-weight: 600 !important;
		position: relative;
	}

	.toc-item.active::before {
		content: '';
		position: absolute;
		left: -8px;
		top: 0;
		bottom: 0;
		width: 3px;
		background: var(--text-primary);
		border-radius: 0;
	}

	.toc-item.active.toc-h3 {
		font-weight: 500;
		color: var(--text-primary) !important;
	}

	/* Hide on smaller screens */
	@media (max-width: 1000px) {
		.table-of-contents {
			display: none;
		}
	}

	/* Custom scrollbar */
	.table-of-contents::-webkit-scrollbar {
		width: 2px;
	}

	.table-of-contents::-webkit-scrollbar-track {
		background: transparent;
	}

	.table-of-contents::-webkit-scrollbar-thumb {
		background: var(--border-color);
		border-radius: 1px;
	}

	.table-of-contents::-webkit-scrollbar-thumb:hover {
		background: var(--text-muted);
	}
</style> 