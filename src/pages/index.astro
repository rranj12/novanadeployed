---
import Layout from '../layouts/Layout.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';

// Read all ASCII art frames
import fs from 'fs';
import path from 'path';

let asciiFrames = [];
try {
	// Load frames frame_00.txt through frame_11.txt
	for (let i = 0; i < 20; i++) {
		const frameNumber = i.toString().padStart(2, '0');
		const framePath = path.join(process.cwd(), 'frames5', `frame_${frameNumber}.txt`);
		const rawAscii = fs.readFileSync(framePath, 'utf-8');
		
		// Process ASCII to make darker characters bold
		const processedAscii = rawAscii.replace(/[+*#%@=]/g, (char) => {
			return `<span class="bold-char">${char}</span>`;
		});
		
		asciiFrames.push(processedAscii);
	}
} catch (error) {
	console.error('Could not read ASCII frames:', error);
	// Fallback to single frame if frames folder doesn't exist
	try {
		const rawAscii = fs.readFileSync(path.join(process.cwd(), 'ascii.txt'), 'utf-8');
		const processedAscii = rawAscii.replace(/[+*#%@=]/g, (char) => {
			return `<span class="bold-char">${char}</span>`;
		});
		asciiFrames.push(processedAscii);
	} catch (fallbackError) {
		console.error('Could not read fallback ascii.txt:', fallbackError);
	}
}
---

<Layout title="Thematic Deep Technology Insights and Market Analysis" description="Professional analysis of emerging technology opportunities and market trends">
	<Header currentPath="/" />
	
	<main class="main">
		<div class="page-container">
			<section class="hero">
				<div class="ascii-background">
					<pre class="ascii-art" id="ascii-art"></pre>
				</div>
				<div class="hero-container">
					<div class="hero-content">
						<h1 class="hero-title">We're betting on deep technology innovation and adoption, from the birthplace of Silicon Valley.</h1>
						<p class="hero-subtitle">Novana's Stanford-based team produces in-house technology analyses, investment research briefs, and market trend writeups across edge computing, biotechnology, artificial intelligence, and other frontier technology industries.</p>
					</div>
				</div>
			</section>
		</div>
	</main>
	<Footer />
</Layout>

<script define:vars={{ asciiFrames }}>
	// ASCII Animation
	document.addEventListener('DOMContentLoaded', function() {
		const asciiElement = document.getElementById('ascii-art');
		let currentFrame = 0;
		
		console.log('ASCII frames loaded:', asciiFrames ? asciiFrames.length : 0);
		
		// Set initial frame
		if (asciiFrames && asciiFrames.length > 0) {
			asciiElement.innerHTML = asciiFrames[0];
			console.log('Set initial frame');
			
			// Only animate if we have multiple frames
			if (asciiFrames.length > 1) {
				console.log('Starting animation with', asciiFrames.length, 'frames');
				setInterval(() => {
					currentFrame = (currentFrame + 1) % asciiFrames.length;
					asciiElement.innerHTML = asciiFrames[currentFrame];
					console.log('Frame:', currentFrame);
				}, 200); // Slightly slower for testing
			}
		} else {
			console.error('No ASCII frames available');
			asciiElement.innerHTML = 'No animation frames loaded';
		}
	});
</script>

<style>
	/* Global body styling for wide screens */
	:global(body) {
		background: #fff;
		margin: 0;
		padding: 0;
	}

	.page-container {
		max-width: 1440px;
		margin: 0 auto;
		background: #fff;
		position: relative;
		min-height: 100vh;
	}

	/* Add subtle borders for screens wider than MacBook */
	@media (min-width: 1441px) {
		.page-container {
			border-left: 1px solid #e5e5e5;
			border-right: 1px solid #e5e5e5;
		}
	}

	.hero {
		position: relative;
		min-height: calc(140vh - 80px);
		display: flex;
		align-items: center;
		overflow: hidden;
	}
	
	.ascii-background {
		position: absolute;
		top: 37%;
		left: 51%;
		transform: translate(-50%, -50%);
		z-index: 1;
		opacity: 10.0;
		pointer-events: none;
	}
	
	.ascii-art {
		font-family: "Courier New", "SF Mono", Monaco, "Cascadia Code", "Roboto Mono", Consolas, "Liberation Mono", Menlo, monospace;
		/* Keep the font size that works well */
		font-size: 5px;
		line-height: 1;
		color: #000000;
		white-space: pre;
		margin: 0;
		display: block;
		letter-spacing: 0;
		word-spacing: 0;
		font-weight: normal;
		font-variant-ligatures: none;
		text-rendering: optimizeSpeed;
		transform: scaleX(0.75);
		transform-origin: center;
	}
	
	.bold-char {
		font-weight: bold;
		color: #000000;
	}
	
	.hero-container {
		width: 100%;
		max-width: 1200px;
		margin: 0 auto;
		padding: 0 var(--spacing-lg);
		position: relative;
		z-index: 10;
	}
	
	.hero-content {
		max-width: 800px;
		margin-left: 16.5%;
		position: absolute;
		top: calc(37% + 280px);
		transform: translateY(0);
	}
	
	.hero-title {
		font-size: 3rem;
		font-weight: 700;
		line-height: 1.1;
		margin-bottom: var(--spacing-xl);
		color: var(--text-primary);
	}
	
	.hero-subtitle {
		font-size: 1.3rem;
		line-height: 1.6;
		color: var(--text-secondary);
		margin: 0;
	}
	
	/* Fine-tune for very large screens */
	@media (min-width: 1800px) {
		.ascii-art {
			font-size: 5px;
			transform: scaleX(calc(0.05 * 100vw / 2040));
		}
	}
	
	/* Fine-tune for smaller desktop screens */
	@media (max-width: 1200px) and (min-width: 769px) {
		.ascii-art {
			font-size: 5px;
			transform: scaleX(calc(0.05 * 100vw / 2040));
		}
	}
	
	/* Mobile devices - completely different layout */
	@media (max-width: 768px) {
		.hero-title {
			font-size: 2rem;
		}
		
		.hero-subtitle {
			font-size: 1rem;
		}
		
		.ascii-background {
			display: none;
		}
	}
</style>